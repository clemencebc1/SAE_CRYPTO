from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

def bitstring_to_bytes(s: str) -> bytes:
    # Convertit une chaîne de '0' et '1' en octets
    return int(s, 2).to_bytes((len(s) + 7) // 8, byteorder='big')

def decrypt_cbc(iv: bytes, key: bytes, ciphertext: bytes) -> bytes:
    # Vérification de la longueur de l'IV
    if len(iv) != 16:
        raise ValueError("L'IV doit avoir une longueur de 16 octets (128 bits).")
    if len(ciphertext) % 16 != 0:
        raise ValueError("La longueur du message chiffré doit être un multiple de 16 octets.")
    
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    plaintext = decryptor.update(ciphertext) + decryptor.finalize()
    return plaintext

if __name__ == "__main__":
    keys_str
    key = keys_str[:256]
    key_bytes = bitstring_to_bytes(key)  # Conversion correcte ici

    # Premier message
    message1 = bytes.fromhex("4311799b24e1096fbfb6687af87649f5e010847a104cac93dde2c7995c5243ff28083a2fafc04f3c27be51fd6436aac6")
    IV1 = message1[:16]
    texte1 = message1[16:]
    
    print("Premier message déchiffré :")
    print(decrypt_cbc(IV1, key_bytes, texte1))
    
    # Second message
    message2 = bytes.fromhex("1147f288500b1dd47605cd84c1af4a276352ab9a3e27de5868b9dfc1d5a044d928083a2fafc04f3c27be51fd6436aac6")
    IV2 = message2[:16]
    texte2 = message2[16:]
    
    print("\nSecond message déchiffré :")
    print(decrypt_cbc(IV2, key_bytes, texte2))

    message3 = ""
    
    message6 = bytes.fromhex("fc4663b06a2a3d09a6d26e252315718386c7292d28ff65379c37390cc680e849317bed2e283ca28a5e156f186cb43064")
    message7 = bytes.fromhex("7a64e11019cbe07c83dbd7c7115c4dc4ab1f3d983db3e14031dea8451ef01ffb317bed2e283ca28a5e156f186cb43064")

    keys_str
    key2 = keys_str_2[:256]
    keys_bytes_2 = bitstring_to_bytes(key2)

    IV6 = message6[:16]
    texte6 = message6[16:]
    print("Troisieme message dechifre : ")
    print(decrypt_cbc(IV6, keys_bytes_2, texte6))

    IV7 = message7[:16]
    texte7 = message7[16:]
    print("Quatrieme message dechiffre : ")
    print(decrypt_cbc(IV7, keys_bytes_2, texte7))